// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?   @unique
  password  String?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  questions Question[] @relation("UserQuestions")
  answers   Answer[]   @relation("UserAnswers")
  votes      Vote[]
}

model Question {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  userId    Int
  user      User      @relation("UserQuestions", fields: [userId], references: [id])
  answers   Answer[]
  edits     Edit[]    @relation("QuestionEdits")
  votes      Vote[]
}


model Answer {
  id        Int       @id @default(autoincrement())
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  questionId Int
  userId    Int
  question  Question  @relation(fields: [questionId], references: [id])
  user      User      @relation("UserAnswers", fields: [userId], references: [id])
  edits     Edit[]    @relation("AnswerEdits")
  votes      Vote[]
}

model Edit {
  id          Int       @id @default(autoincrement())
  userId      Int
  newTitle    String?
  newBody     String?
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  approvedAt  DateTime?

  answerId  Int?
  questionId  Int?

  question    Question?   @relation("QuestionEdits", fields: [questionId], references: [id], onDelete: Cascade)
  answer      Answer?     @relation("AnswerEdits", fields: [answerId], references: [id], onDelete: Cascade)
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  questionId Int?
  answerId   Int?
  voteType  Boolean
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  question  Question? @relation(fields: [questionId], references: [id])
  answer    Answer?   @relation(fields: [answerId], references: [id])
}
